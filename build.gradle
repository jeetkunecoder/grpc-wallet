plugins {
    id 'application'
    id 'com.google.protobuf' version '0.8.8'
    id 'idea'
}

repositories {
    maven { url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def grpcVersion = '1.19.0'
def protobufVersion = '3.7.1'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile 'org.postgresql:postgresql:42.2.5'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.1.4.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.4.RELEASE'

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.25.1"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task walletServer(type: CreateStartScripts) {
    mainClassName = 'com.betpawa.wallet.WalletServer'
    applicationName = 'wallet-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task walletClient(type: CreateStartScripts) {
    mainClassName = 'com.betpawa.wallet.WalletClient'
    applicationName = 'wallet-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(walletServer)
    from(walletClient)
    fileMode = 0755
}